---
title: "Influence of ethnicity on the diagnostic accuracy of plasma p-tau217 for the identification of Alzheimerâ€™s disease: A consecutive mixed  memory clinic cohort study"
author: "Daniel Kjaergaard"
date: "`r Sys.Date()`"
output: html_document
---
This script was contains all code used for the statistical analyses. Dataframe and filepath are not disclosed because of privacy and datasecurity.


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE) 
```

### Read csv 
```{r}
d1 <- read.csv("filepath.csv", sep = ";")
```

### Open packages
```{r, results=FALSE, messages = FALSE, warning=FALSE}
library(arsenal)
library(forcats)
library(tidyr)
library(ggplot2)
library(ggsignif)
library(dplyr)
library(tidyverse)
library(MatchIt)
library(caret)
library(pROC)
library(pscl)
library(lubridate)
library(sjPlot)
library(car)
library(tidyverse)
library(grid)
library(gridExtra)
```

### Clean-up dataframe
```{r, warning=FALSE}
d1$sex <- as.factor(d1$sex)
  levels(d1$sex) <- c("female", "male")
  
d1$minority_majority <- as.factor(d1$minority_majority)
  levels(d1$minority_majority) <- c("Majority", "Minority")

d1$country_of_origin <- as.factor(d1$country_of_origin)
  d1$country_of_origin <- fct_collapse(d1$country_of_origin, Morocco = c("Marocco", "Morrocco"))
  d1$country_of_origin <- fct_collapse(d1$country_of_origin, Palestine = c("Palistinia", "Morrocco"))
  d1$country_of_origin <- fct_collapse(d1$country_of_origin, Tunisia = c("Tunisia", "Tunesia"))
  d1$country_of_origin <- fct_collapse(d1$country_of_origin, Yugoslavia = c("Yugoslavia", "ExYugoslavia"))
  d1$geographic_region <- d1$country_of_origin
  d1$geographic_region <- fct_collapse(d1$geographic_region, DK = c("DK", "SWE"))
  d1$geographic_region <- fct_collapse(d1$geographic_region, Mid_east = c("Turkey", "Iraq", "Iran", "Afghanistan",
                                                                                "Azerbaijan", "Armenia", "Turkmenistan",
                                                                                "Pakistan", "Syria", "Israel", "Lebanon",
                                                                                "Palestine", "Qatar", "Yemen", "Cyprus", "Georgia"))
  d1$geographic_region <- fct_collapse(d1$geographic_region, Europe = c("Albania", "Andorra", "Austria", "Belarus", 
                                                          "Belgium", "Bosnia", "Bulgaria", 
                                                          "Croatia", "Cyprus", "Czech Republic", "Czechoslovakia", 
                                                          "Estonia", "Finland", "France", "Germany", "Greece", 
                                                          "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", 
                                                          "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", 
                                                          "Malta", "Moldova", "Monaco", "Montenegro", 
                                                          "Netherlands", "North Macedonia", "Norway", 
                                                          "Poland", "Portugal", "Romania", "Russia", 
                                                          "San Marino", "Serbia", "Slovakia", "Slovenia", 
                                                          "Spain", "Switzerland", "Turkey", "Ukraine", 
                                                          "United Kingdom", "Vatican City", "England", "ExYugoslavia",
                                                          "Faroe", "Greenland", "Macedonia", "Yugoslavia"))
  d1$geographic_region <- fct_collapse(d1$geographic_region, Africa = c("Algeria", "Angola", "Benin", "Botswana", 
                                                                                   "Burkina Faso", 
                                                          "Burundi", "Cabo Verde", "Cameroon", "Central African Republic", 
                                                          "Chad", "Comoros", "Democratic Republic of the Congo", 
                                                          "Republic of the Congo", "Djibouti", "Egypt", 
                                                          "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", 
                                                          "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", 
                                                          "Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", 
                                                          "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", 
                                                          "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", 
                                                          "Rwanda", "Sao Tome and Principe", "Senegal", "Seychelles", 
                                                          "Sierra Leone", "Somalia", "SouthAfrica", "South Sudan", 
                                                          "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda", 
                                                          "Zambia", "Zimbabwe"))

excluded_countries <- c("Argentina", "Australia", "Barbados", "Bolivia", "Brazil", "CentralAmerica", "Chile", "China", "Colombia", "Cuba", "ElSalvador", "India", "Indonesia", "Jamaica", "Japan", "Korea", "Malaysia", "Mexico", "NewZealand", "PapuaNewGuinea", "Philippines", "SriLanka", "Taiwan", "Thailand", "Trinidad", "Uruguay", "USA", "Vietnam")
 d1$geographic_region <- as.factor(ifelse(d1$geographic_region %in% excluded_countries, NA, as.character(d1$geographic_region)))
  d1$geographic_region <- relevel(d1$geographic_region, ref = "DK")   

d1$cognitive_status <- as.factor(d1$cognitive_status)
  levels(d1$cognitive_status) <- c("NCI", "MCI", "Mild dementia", "moderate dementia", "severe dementia", "mild-severe psychiatric", "undecided", "SCD")
  d1$cognitive_status <- fct_collapse(d1$cognitive_status, SCD = c("NCI", "SCD"))
  d1$cognitive_status <- fct_collapse(d1$cognitive_status, MCI = c("MCI", "mild-severe psychiatric"))
  d1$cognitive_status <- droplevels(d1$cognitive_status)
  
d1$dementia_type <- as.factor(d1$dementia_type)
  levels(d1$dementia_type) <- c("AD", "VaD", "DLB", "Alcohol", "NPH", "bvFTD", "SD", "nfPPA", "PD", "aPD", "Other", "NCI", "mix", "Affective")
  
d1$unknown <- as.factor(d1$dementia_other_description == "Unknown")
  levels(d1$unknown) <- c("Specified", "Unspecified")

d1$raw_ptau217_cutoff <- cut(d1$raw_Ptau217_Lilly,
                         breaks=c(0,0.308,Inf),
                         labels=c('217_normal', '217_abnormal'))
                         d1$raw_ptau217_cutoff <- relevel(d1$raw_ptau217_cutoff, ref = "217_normal") 
  
d1$norm_low_ptau217_cutoff <- cut(d1$Norm_Low_ptau217_Lilly,
                         breaks=c(0,0.308,Inf),
                         labels=c('217_normal', '217_abnormal'))
                         d1$norm_low_ptau217_cutoff <- relevel(d1$norm_low_ptau217_cutoff, ref = "217_normal") 
d1$norm_high_ptau217_cutoff <- cut(d1$Norm_High_ptau217_Lilly,
                         breaks=c(0,0.308,Inf),
                         labels=c('217_normal', '217_abnormal'))
                         d1$norm_high_ptau217_cutoff <- relevel(d1$norm_high_ptau217_cutoff, ref = "217_normal") 
  
d1$diabetes <- ifelse(d1$diabetes == 2, 0, 1)
d1$hypertension <- ifelse(d1$hypertension == 2, 0, 1)
d1$hyperchol <- ifelse(d1$hyperchol == 2, 0, 1) 
d1$stroke <- ifelse(d1$stroke == 2, 0, 1) 
d1$thyroid_disease <- ifelse(d1$thyroid_kidney_liver_disease == 2, 0, 1)
  d1 <- subset(d1, select=-(thyroid_kidney_liver_disease))
d1$kidney_disease <- ifelse(d1$kidney_disease == 2, 0, 1)
d1$liver_disease <- ifelse(d1$liver_disease == 2, 0, 1)
d1$ihd <- ifelse(d1$ihd == 2, 0, 1)
d1$afli <- ifelse(d1$afli == 2, 0, 1) 
d1$depression <- ifelse(d1$depression == 2, 0, 1) 
d1$neuropathy <- ifelse(d1$neuropathy == 2, 0, 1) 
d1$head_trauma <- ifelse(d1$head_trauma == 2, 0, 1) 
d1$sleep_disorder <- ifelse(d1$sleep_disorder == 2, 0, 1)

d1$csf_ab42 <- as.factor(d1$csf_ab42)
  levels(d1$csf_ab42) <- c("normal", "abnormal")
d1$csf_ptau181 <- as.factor(d1$csf_ptau181)
  levels(d1$csf_ptau181) <- c("normal", "abnormal")
d1$csf_ttau <- as.factor(d1$csf_ttau)
  levels(d1$csf_ttau) <- c("normal", "abnormal")
d1$amyloid_pet <- as.factor(d1$amyloid_pet)
  levels(d1$amyloid_pet) <- c("normal", "abnormal")
d1$csf_ab4240 <- as.factor(d1$csf_ab4240)
  levels(d1$csf_ab4240) <- c("normal", "abnormal")

d1$Center <- as.factor(d1$Center)

d1$dementia_other_description <- as.factor(d1$dementia_other_description)

d1$dementia_AD_non_AD <- d1$dementia_type
  d1$dementia_AD_non_AD <- fct_collapse(d1$dementia_AD_non_AD, AD_and_mixed = c(
    "AD", "mix"))
  d1$dementia_AD_non_AD <- fct_collapse(d1$dementia_AD_non_AD, Non_AD = c(
    "VaD", "DLB", "Alcohol", "NPH", "bvFTD", "SD", "nfPPA", "PD", "aPD"))
  d1$dementia_AD_non_AD <- fct_collapse(d1$dementia_AD_non_AD, Non_neurological = c(
    "NCI", "Affective"))
  levels(d1$dementia_AD_non_AD) <- c("AD_and_mixed", "Non_AD", "Unknown", "Non_neurological")
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Congenital_hydrocephalus"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "HAND"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "korsakoff"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Meningioma"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "traumatic"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Dandy_Walker"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "encephalitis"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "hemorrhage"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "seq_from_cardiac_arrest"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "congenital_brain_damage"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "epilepsy"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "hypertensive_encephalopathy"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "meningioma"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "MS"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "myelit"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Wernicke_encephalopathy"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "LATE"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "non_neurodegenerative_non_affective"] <- "Non_AD"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "b12"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "drug_abuse"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "multifactorial"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Nefropathy"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "polyneuropathy"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "sleepapnea_depression"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "adhd"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "metadon"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "slepp_apnea"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "autism"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "diabetes"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "pain"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "sleep_apnea"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "thyroid_disease"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Multifactorial"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "cancer"] <- "Non_neurological"
  d1$dementia_AD_non_AD[d1$dementia_type == "Other" & d1$dementia_other_description == "Unknown"] <- "Unknown"

d1$AD_clinical_status <- d1$dementia_AD_non_AD
d1$AD_clinical_status <- fct_collapse(d1$AD_clinical_status, CLI_AD_positive = c("AD_and_mixed"))
d1$AD_clinical_status <- fct_collapse(d1$AD_clinical_status, CLI_AD_negative = c("Unknown", "Non_neurological", "Non_AD"))
d1$AD_clinical_status <- relevel(d1$AD_clinical_status, ref = "CLI_AD_negative")   


d1$alat [d1$Center == "Memory Clinic MalmÃ¶"] <- d1$alat [d1$Center == "Memory Clinic MalmÃ¶"] * 60
d1$hba1c [d1$Center == "Danish Dementia Biobank"] <- (d1$hba1c [d1$Center == "Danish Dementia Biobank"] - 0.8285) / 0.1455

d1$bmi_categorical   <- cut(d1$bmi,
                            breaks=c(0,18.5,24.9, 29.9,100),
                            labels=c('underweight', 'normal', 'overweight', 'obesity'))
  d1$bmi_categorical <- relevel(d1$bmi_categorical, ref = "normal")   


d1$creatinine_categorical <- ifelse(d1$sex == "female",
                                    cut(d1$creatinine, breaks = c(0, 90, Inf), labels = c("normal", "abnormal")),
                                    cut(d1$creatinine, breaks = c(0, 105, Inf), labels = c("normal", "abnormal")))
                            d1$creatinine_categorical <- as.factor(d1$creatinine_categorical)
                            levels(d1$creatinine_categorical) <- c("normal", "abnormal")
  
d1$CKD   <- cut(d1$egfr,
                               breaks=c(0,60,100),
                               labels=c('functional_CKD', 'Normal_kidney'))
  d1$CKD <- relevel(d1$CKD, ref = "Normal_kidney")   


d1$alat_categorical <- ifelse(d1$sex == "female",
                                    cut(d1$alat, breaks = c(0, 10, 45, Inf), labels = c("alt_low", "alt_normal", "alt_abnormal")),
                                    cut(d1$alat, breaks = c(0, 10, 70, Inf), labels = c("alt_low", "alt_normal", "alt_abnormal")))
                            d1$alat_categorical <- as.factor(d1$alat_categorical)
                            levels(d1$alat_categorical) <- c("alt_low", "alt_normal", "alt_abnormal")
                              d1$alat_categorical <- relevel(d1$alat_categorical, ref = "alt_normal")   



d1$hba1c_categorical   <- cut(d1$hba1c,
                             breaks=c(0,48,Inf),
                             labels=c('normal', 'high'))

d1$tsh_categorical   <- cut(d1$tsh,
                           breaks=c(0,0.3,4.5,Inf),
                           labels=c('low', 'normal', 'high'))

d1$diseases_per_pt <- (d1$diabetes + d1$hypertension + d1$hyperchol +
                                  d1$stroke + d1$thyroid_disease + d1$kidney_disease +
                                  d1$liver_disease + d1$ihd + d1$afli + d1$depression +
                                  d1$neuropathy + d1$head_trauma + d1$sleep_disorder)
d1$diseases_per_pt <- cut(d1$diseases_per_pt,
                          breaks=c(-Inf,1,3,6),
                          labels=c('cormor_0-1', 'cormor_2-3', 'cormor_4-6'))
```


### Check success of matching
```{r, warning=FALSE}
match_check <- matchit(minority_majority ~ age + sex, data = d1,
                  method = "nearest", distance = "glm")
summary(match_check, un = FALSE)
```


## Check normality of plasma p-tau217
```{r}
hist(d1$raw_Ptau217_Lilly, probability = TRUE, breaks = 30)
hist(log(d1$raw_Ptau217_Lilly), probability = TRUE, breaks = 30)
qqnorm(scale(d1$raw_Ptau217_Lilly))
abline(0,1)
qqnorm(scale(log(d1$raw_Ptau217_Lilly)))
abline(0,1)

hist(d1$age)
hist(d1$education)
hist(d1$raw_Ptau217_Lilly)
hist(d1$bmi)
hist(d1$egfr)
hist(d1$alat)
hist(d1$hba1c)
hist(d1$tsh)
```



### **TABLE 1**
```{r}
mean_settings  <- tableby.control(test=TRUE, total=FALSE,
                               numeric.test = "anova", cat.test="chisq",
                               numeric.stats=c("N", "mean", "sd"),
                               cat.stats=c("countpct"))
median_settings  <- tableby.control(test=TRUE, total=FALSE,
                               numeric.test="kwt", cat.test="chisq",
                               numeric.stats=c("N", "median", "q1q3"),
                               cat.stats=c("countpct"))

summary(tableby(minority_majority ~ Center, data=d1, control = mean_settings))
summary(tableby(minority_majority ~ age + sex + education, data=d1, control = mean_settings))
summary(tableby(minority_majority ~ raw_Ptau217_Lilly, data=d1, control = median_settings))
summary(tableby(minority_majority ~ dementia_type, data=d1, control = mean_settings))
summary(tableby(minority_majority ~ bmi + egfr + alat + hba1c + tsh + diseases_per_pt, data=d1, control = median_settings))
summary(tableby(minority_majority ~ CKD, data=d1, control = mean_settings))

summary(tableby(geographic_region ~ Center, data=d1, control = mean_settings))
summary(tableby(geographic_region ~ age + sex + education, data=d1, control = mean_settings))
summary(tableby(geographic_region ~ raw_Ptau217_Lilly, data=d1, control = median_settings))
summary(tableby(geographic_region ~ dementia_type, data=d1, control = median_settings))
summary(tableby(geographic_region ~ bmi + egfr + alat + hba1c + tsh, data=d1, control = median_settings))
summary(tableby(geographic_region ~ diseases_per_pt, data=d1, control = median_settings))
summary(tableby(geographic_region ~ CKD, data=d1, control = median_settings))

```


### Create dataframe with patients with CSF or AB-PET
```{r}
d1_csf <- subset(d1, csf_ab42 == "normal" | csf_ab42 == "abnormal" |
                   csf_ptau181 == "normal" | csf_ptau181 == "abnormal" |
                   csf_ttau == "normal" | csf_ttau == "abnormal" |
                   amyloid_pet == "normal" | amyloid_pet == "abnormal" |
                   csf_ab4240 == "normal" | csf_ab4240 == "abnormal")

#Defining the assays used was dependent on date (day-month-year)
d1_csf$date_2 <- as_date(d1_csf$date)
d1_csf$assay_change_group <- factor(
  ifelse(
    d1_csf$Center == "Danish Dementia Biobank" & d1_csf$date_2 >= as_date("2020-01-01") & d1_csf$date_2 <= as_date("2022-06-30"),
    "InnotestELISA",
  ifelse(
      d1_csf$Center == "Danish Dementia Biobank" & d1_csf$date_2 >= as_date("2022-07-01") & d1_csf$date_2 <= as_date("2023-12-31"),
      "ElecsysVersion2",
  ifelse(
    d1_csf$Center == "Memory Clinic MalmÃ¶" & d1_csf$date_2 >= as_date("2017-01-01") & d1_csf$date_2 <= as_date("2019-10-31"),
    "MSDAssay",
  ifelse(
      d1_csf$Center == "Memory Clinic MalmÃ¶" & d1_csf$date_2 >= as_date("2019-11-01") & d1_csf$date_2 <= as_date("2025-01-01"),
      "Lumipulse",
      NA)))),
  levels = c("InnotestELISA", "ElecsysVersion2", "MSDAssay", "Lumipulse"))
  
d1_csf$ptauratio <- d1_csf$ptau181_raw/d1_csf$ab42_raw
d1_csf$ptauratio_reversed <- d1_csf$ab42_raw/d1_csf$ptau181_raw

d1_csf <- d1_csf %>%
  mutate(
    AD_biomarker_status = case_when(
      amyloid_pet == "abnormal" & assay_change_group == "InnotestELISA" & ptauratio_reversed < 17.7 ~ "BIO_AD_Positive",
      amyloid_pet == "normal" & assay_change_group == "InnotestELISA" & ptauratio_reversed < 17.7 ~ "BIO_AD_Negative",
      amyloid_pet == "normal" & assay_change_group == "InnotestELISA" & ptauratio_reversed > 17.7 ~ "BIO_AD_Negative",
      amyloid_pet == "abnormal" & assay_change_group == "InnotestELISA" & ptauratio_reversed > 17.7 ~ "BIO_AD_Positive",
      is.na(amyloid_pet) & assay_change_group == "InnotestELISA" & ptauratio_reversed < 17.7 ~ "BIO_AD_Positive",
      is.na(amyloid_pet) & assay_change_group == "InnotestELISA" & ptauratio_reversed > 17.7 ~ "BIO_AD_Negative",
      amyloid_pet == "abnormal" & assay_change_group == "InnotestELISA" & is.na(ptauratio_reversed) ~ "BIO_AD_Positive",
      amyloid_pet == "normal" & assay_change_group == "InnotestELISA" & is.na(ptauratio_reversed) ~ "BIO_AD_Negative",
        amyloid_pet == "abnormal" & assay_change_group == "ElecsysVersion2" & ptauratio > 0.023 ~ "BIO_AD_Positive",
        amyloid_pet == "normal" & assay_change_group == "ElecsysVersion2" & ptauratio > 0.023 ~ "BIO_AD_Negative",
        amyloid_pet == "normal" & assay_change_group == "ElecsysVersion2" & ptauratio < 0.023 ~ "BIO_AD_Negative",
        amyloid_pet == "abnormal" & assay_change_group == "ElecsysVersion2" & ptauratio < 0.023 ~ "BIO_AD_Positive",
        is.na(amyloid_pet) & assay_change_group == "ElecsysVersion2" & ptauratio > 0.023 ~ "BIO_AD_Positive",
        is.na(amyloid_pet) & assay_change_group == "ElecsysVersion2" & ptauratio < 0.023 ~ "BIO_AD_Negative",
        amyloid_pet == "abnormal" & assay_change_group == "ElecsysVersion2" & is.na(ptauratio) ~ "BIO_AD_Positive",
        amyloid_pet == "normal" & assay_change_group == "ElecsysVersion2" & is.na(ptauratio) ~ "BIO_AD_Negative",
          amyloid_pet == "abnormal" & assay_change_group == "MSDAssay" & ptauratio_reversed < 9.89 ~ "BIO_AD_Positive",
          amyloid_pet == "normal" & assay_change_group == "MSDAssay" & ptauratio_reversed < 9.89 ~ "BIO_AD_Negative",
          amyloid_pet == "normal" & assay_change_group == "MSDAssay" & ptauratio_reversed > 9.89 ~ "BIO_AD_Negative",
          amyloid_pet == "abnormal" & assay_change_group == "MSDAssay" & ptauratio_reversed > 9.89 ~ "BIO_AD_Positive",
          is.na(amyloid_pet) & assay_change_group == "MSDAssay" & ptauratio_reversed < 9.89 ~ "BIO_AD_Positive",
          is.na(amyloid_pet) & assay_change_group == "MSDAssay" & ptauratio_reversed > 9.89 ~ "BIO_AD_Negative",
          amyloid_pet == "abnormal" & assay_change_group == "MSDAssay" & is.na(ptauratio_reversed) ~ "BIO_AD_Positive",
          amyloid_pet == "normal" & assay_change_group == "MSDAssay" & is.na(ptauratio_reversed) ~ "BIO_AD_Negative",
            amyloid_pet == "abnormal" & assay_change_group == "Lumipulse" & ptauratio > 0.072 ~ "BIO_AD_Positive",
            amyloid_pet == "normal" & assay_change_group == "Lumipulse" & ptauratio > 0.072 ~ "BIO_AD_Negative",
            amyloid_pet == "normal" & assay_change_group == "Lumipulse" & ptauratio < 0.072 ~ "BIO_AD_Negative",
            amyloid_pet == "abnormal" & assay_change_group == "Lumipulse" & ptauratio < 0.072 ~ "BIO_AD_Positive",
            is.na(amyloid_pet) & assay_change_group == "Lumipulse" & ptauratio > 0.072 ~ "BIO_AD_Positive",
            is.na(amyloid_pet) & assay_change_group == "Lumipulse" & ptauratio < 0.072 ~ "BIO_AD_Negative",
            amyloid_pet == "abnormal" & assay_change_group == "Lumipulse" & is.na(ptauratio) ~ "BIO_AD_Positive",
            amyloid_pet == "normal" & assay_change_group == "Lumipulse" & is.na(ptauratio) ~ "BIO_AD_Negative",
                      TRUE ~ "Review"))

d1_csf$AD_biomarker_status <- as.factor(d1_csf$AD_biomarker_status)
d1_csf <- subset(d1_csf, AD_biomarker_status!= "Review")
d1_csf$AD_biomarker_status <- droplevels(d1_csf$AD_biomarker_status)
```

### **TABLE 2**
```{r}
summary(tableby(minority_majority ~ AD_biomarker_status, data=d1_csf, control = median_settings))
summary(tableby(geographic_region ~ AD_biomarker_status, data=d1_csf, control = median_settings))

summary(tableby(AD_biomarker_status ~ raw_Ptau217_Lilly, data=d1_csf, control = median_settings))
summary(tableby(AD_biomarker_status ~ age + sex + geographic_region, data=d1_csf, control = mean_settings))
summary(tableby(AD_biomarker_status ~ bmi + egfr + alat + hba1c + diseases_per_pt, data=d1_csf, control = median_settings))
summary(tableby(AD_biomarker_status ~ CKD, data=d1_csf, control = median_settings))

summary(tableby(AD_biomarker_status ~ dementia_AD_non_AD, data=d1_csf, control = median_settings))
```


### Linear regression: Model assumptions
```{r}
d1_lm_assumptions <- data.frame(
  d1$raw_Ptau217_Lilly,
  d1$age,
  d1$sex,
  d1$education,
  d1$geographic_region,
  d1$egfr,
  d1$bmi,
  d1$hba1c,
  d1$tsh,
  d1$alat,
  d1$AD_clinical_status)

#removing incomplete cases
d1_lm_assumptions <- d1_lm_assumptions[complete.cases(d1_lm_assumptions), ]

#create log and raw models
model_217_raw <- lm(d1.raw_Ptau217_Lilly ~ d1.AD_clinical_status + d1.hba1c +  d1.age + d1.sex + d1.education + d1.bmi + d1.egfr + d1.tsh + d1.alat +  d1.geographic_region, data = d1_lm_assumptions)
model_log_217_raw <- lm(log(d1.raw_Ptau217_Lilly) ~ d1.AD_clinical_status + d1.hba1c +  d1.age + d1.sex + d1.education + d1.bmi + d1.egfr + d1.tsh + d1.alat +  d1.geographic_region, data = d1_lm_assumptions)


#Normality (Use log-transformed)
qqnorm(rstudent(model_217_raw))
abline(0,1)
hist(resid(model_217_raw), probability = TRUE)

qqnorm(rstudent(model_log_217_raw))
abline(0,1)
hist(resid(model_log_217_raw), probability = TRUE)


#Linearity
plot(rstudent(model_log_217_raw)~d1_lm_assumptions$d1.age)
abline(h=0)
abline(h=-1.96, col = "red")
abline(h=1.96, col = "red")

plot(rstudent(model_log_217_raw)~d1_lm_assumptions$d1.bmi)
abline(h=0)
abline(h=-1.96, col = "red")
abline(h=1.96, col = "red")

plot(rstudent(model_log_217_raw)~d1_lm_assumptions$d1.egfr)
abline(h=0)
abline(h=-1.96, col = "red")
abline(h=1.96, col = "red")

#Variance homogeneity
plot(model_log_217_raw, which = 1, cex.lab = 1.5)
plot(model_log_217_raw, which = 3, cex.lab = 1.5)
abline(h=0)

# Outliers
plot(model_217_raw, which = 4)
abline(h=0.1, col = "red")
plot(model_log_217_raw, which = 4)

# Exclude "Unknown" from d1
d1_excl_unknown <- subset(d1, unknown != "Unspecified")
```

### Multiple linear regressions
```{r}
model_log_217_raw <- lm(log(raw_Ptau217_Lilly) ~ geographic_region + hba1c + age + sex + bmi + egfr + AD_clinical_status, data = d1_excl_unknown)
model_log_217_raw_BIO <- lm(log(raw_Ptau217_Lilly) ~ AD_biomarker_status + geographic_region + hba1c + age + sex + bmi + egfr, data = d1_csf)

summary(model_log_217_raw)
summary(model_log_217_raw_BIO)
```

### *FIGURE 1*
```{r}
#Standardize numeric variables to obtain standardize B-coefficients
#std B: unitless and refer to how many standard deviations a dependent variable will change, per standard deviation increase in the predictor variable
scaled_lm <- lm(scale(log(raw_Ptau217_Lilly)) ~ geographic_region + scale(hba1c) + scale(age) + sex + scale(bmi) + scale(egfr) + AD_clinical_status, data = d1_excl_unknown)
scaled_lm_BIO <- lm(scale(log(raw_Ptau217_Lilly)) ~ AD_biomarker_status + geographic_region + scale(hba1c) + scale(age) + sex + scale(bmi) + scale(egfr), data = d1_csf)

summary(scaled_lm)
confint(scaled_lm, level = 0.95)

summary(scaled_lm_BIO)
confint(scaled_lm_BIO, level = 0.95)

#Standard Beta and adjusted x-axis
theme_set(theme_sjplot())
plot_models(
  scaled_lm, scaled_lm_BIO,
  m.labels = c("Full cohort", "CSF/AÎ²-PET cohort"),
  axis.labels = c("CSF/AÎ²-PET status", "Clinical AD status", "eGFR", "BMI", "Sex (Male)", "Age", "HbA1c", "Greater Middle East", "Europe", "Africa"),
  show.values = FALSE, show.p = TRUE, p.shape = FALSE, spacing = 1.0,
  vline.color = "black", line.size = 1.2, dot.size = 3, colors = c("#E69F00","#56B4E9"), legend.title = NULL) +
  labs(y = "Standardized Î²-Coefficients") +
  theme(axis.text.y = element_text(size = 12, color = "black", family = "serif"),
        axis.text.x = element_text(color = "black", family = "serif"),
        legend.text = element_text(size = 12, color = "black", family = "serif"),
        legend.position = "bottom",
        legend.direction = "horizontal",
        axis.title.x = element_text(color = "black", family = "serif"))


ggsave(filename = "Figure 1.tiff", 
       path = "L:/LovbeskyttetMapper/BlooDiv/ptau217 study/Writing/Study 1/submission alzheimers and dementia", 
       width = 6, 
       height = 6, 
       units = "in", 
       dpi = 300)
```



# DIAGNOSTIC ACCURACY
#Model assumptions (GLM)
```{r}
#Define dataframe
d1_glm_assumption <- d1
d1_glm_assumption <- d1_glm_assumption[!is.na(d1_glm_assumption$geographic_region), ]
d1_glm_assumption <- d1_glm_assumption[!is.na(d1_glm_assumption$egfr), ]
d1_glm_assumption <- d1_glm_assumption[!is.na(d1_glm_assumption$bmi), ]

#Make GLM for all data
glm_assumption_check <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + geographic_region + egfr, family=binomial(link='logit'),
                            data = d1_glm_assumption)    

# Response variable is binary
levels(d1_glm_assumption$AD_clinical_status)

#Extreme outliers (one identified, cooks D > 0.1)
plot(glm_assumption_check, which = 4, id.n = 3)
abline(h = 0.1, col = "red", lty = 2)


# Linearity
d1_glm_assumption |> 
  mutate(comp_res = coef(glm_assumption_check)["age"]*age + residuals(glm_assumption_check, type = "working")) |> 
  ggplot(aes(x = age, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)
d1_glm_assumption |> 
  mutate(comp_res = coef(glm_assumption_check)["bmi"]*bmi + residuals(glm_assumption_check, type = "working")) |> 
  ggplot(aes(x = bmi, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)
d1_glm_assumption |> 
  mutate(comp_res = coef(glm_assumption_check)["egfr"]*egfr + residuals(glm_assumption_check, type = "working")) |> 
  ggplot(aes(x = egfr, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)


# Observations are independent
plot(glm_assumption_check, which = 3)
plot(glm_assumption_check)

#No multicollinearity among predictors (GVIF ~ 1, not above 5)
car::vif(glm_assumption_check)

#Assumptions are all appropriate although there is 1 outlier record id 148 (lowest eGFR)
d1_glm_assumption_excl_outliers <- subset(d1_glm_assumption, !(record_id %in% c(148)))
glm_assumption_excl_outliers <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + geographic_region + egfr,
                                      family=binomial(link='logit'), data = d1_glm_assumption_excl_outliers)
plot(glm_assumption_excl_outliers, which = 4, id.n = 3)
abline(h = 0.1, col = "red", lty = 2)
plot(glm_assumption_excl_outliers, which = 3)
summary(glm_assumption_excl_outliers)
d1_glm_assumption_excl_outliers |> 
  mutate(comp_res = coef(glm_assumption_excl_outliers)["age"]*age + residuals(glm_assumption_excl_outliers, type = "working")) |> 
  ggplot(aes(x = age, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)
d1_glm_assumption_excl_outliers |> 
  mutate(comp_res = coef(glm_assumption_excl_outliers)["bmi"]*bmi + residuals(glm_assumption_excl_outliers, type = "working")) |> 
  ggplot(aes(x = bmi, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)
d1_glm_assumption |> 
  mutate(comp_res = coef(glm_assumption_excl_outliers)["egfr"]*egfr + residuals(glm_assumption_excl_outliers, type = "working")) |> 
  ggplot(aes(x = egfr, y = comp_res)) +
  geom_point() +
  geom_smooth(color = "red", method = "lm", linetype = 2, se = F) +
  geom_smooth(se = F)
```



# K-fold cross validation **Table 3**
```{r}
# run the code without the outliers: dataframe <- subset(d1_prediction, !(record_id %in% c(148)))
options(scipen = 999)

d1_k_fold <- d1
d1_k_fold <- d1_k_fold[!is.na(d1_k_fold$geographic_region), ]
d1_k_fold <- d1_k_fold[!is.na(d1_k_fold$egfr), ]
d1_k_fold <- d1_k_fold[!is.na(d1_k_fold$bmi), ]
d1_k_fold <- subset(d1_k_fold, unknown!= "Unspecified")


#Logistirc regression
model_glm_ptau_only <- glm(AD_clinical_status ~ raw_Ptau217_Lilly, data = d1_k_fold, family = binomial())
model_glm_ethnicity <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + geographic_region, data = d1_k_fold, family = binomial())
model_glm_covariates <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr, data = d1_k_fold, family = binomial())
model_glm_full <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region, data = d1_k_fold, family = binomial())

summary(model_glm_ptau_only)
confint(model_glm_ptau_only)
pR2(model_glm_ptau_only)

summary(model_glm_ethnicity)
confint(model_glm_ethnicity)
pR2(model_glm_ethnicity)

summary(model_glm_covariates)
confint(model_glm_covariates)
pR2(model_glm_covariates)

summary(model_glm_full)
confint(model_glm_full)
pR2(model_glm_full)


print(cbind(exp(model_glm_ptau_only$coefficients), exp(confint(model_glm_ptau_only))))
print(cbind(exp(model_glm_ethnicity$coefficients), exp(confint(model_glm_ethnicity))))
print(cbind(exp(model_glm_covariates$coefficients), exp(confint(model_glm_covariates))))
print(cbind(exp(model_glm_full$coefficients), exp(confint(model_glm_full))))


#ROC k-fold
set.seed(123)
ctrl_clinical <- trainControl(
                     method="cv", 
                     number = 10, 
                     summaryFunction=twoClassSummary, 
                     classProbs=TRUE,
                     savePredictions = TRUE)
model_glm_k_fold_ptau_only <- train(AD_clinical_status ~ raw_Ptau217_Lilly,
               data = d1_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_clinical)
model_glm_k_fold_ethnicity <- train(AD_clinical_status ~ raw_Ptau217_Lilly + geographic_region,
               data = d1_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_clinical)
model_glm_k_fold_covariates <- train(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr,
               data = d1_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_clinical)
model_glm_k_fold_full <- train(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region,
               data = d1_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_clinical)


print(model_glm_k_fold_ptau_only,showSD=T)
print(model_glm_k_fold_ethnicity,showSD=T)
print(model_glm_k_fold_covariates,showSD=T)
print(model_glm_k_fold_full,showSD=T)


roc_object_k_fold_ptau_only <- roc(
                 response = model_glm_k_fold_ptau_only$pred$obs, 
                 predictor = model_glm_k_fold_ptau_only$pred$CLI_AD_positive,
                 levels = rev(levels(model_glm_k_fold_ptau_only$pred$obs)))
roc_object_k_fold_ethnicity <- roc(
                 response = model_glm_k_fold_ethnicity$pred$obs, 
                 predictor = model_glm_k_fold_ethnicity$pred$CLI_AD_positive,
                 levels = rev(levels(model_glm_k_fold_ethnicity$pred$obs)))
roc_object_k_fold_covariates <- roc(
                 response = model_glm_k_fold_covariates$pred$obs, 
                 predictor = model_glm_k_fold_covariates$pred$CLI_AD_positive,
                 levels = rev(levels(model_glm_k_fold_covariates$pred$obs)))
roc_object_k_fold_full <- roc(
                 response = model_glm_k_fold_full$pred$obs, 
                 predictor = model_glm_k_fold_full$pred$CLI_AD_positive,
                 levels = rev(levels(model_glm_k_fold_full$pred$obs)))

#The AUC for each fold
model_glm_k_fold_ptau_only$resample$ROC
model_glm_k_fold_ethnicity$resample$ROC
model_glm_k_fold_covariates$resample$ROC
model_glm_k_fold_full$resample$ROC
```

# K-fold cross validation of CSF **Supplementary Table 4**
```{r}
d1_csf_k_fold <- d1_csf
d1_csf_k_fold <- d1_csf_k_fold[!is.na(d1_csf_k_fold$geographic_region), ]
d1_csf_k_fold <- d1_csf_k_fold[!is.na(d1_csf_k_fold$egfr), ]
d1_csf_k_fold <- d1_csf_k_fold[!is.na(d1_csf_k_fold$bmi), ]
d1_csf_k_fold$AD_biomarker_status <- droplevels(d1_csf_k_fold$AD_biomarker_status)
d1_csf_k_fold$AD_biomarker_status <- as.factor(d1_csf_k_fold$AD_biomarker_status)


#Logistic regression
model_glm_csf_ptau_only <- glm(AD_biomarker_status ~ raw_Ptau217_Lilly, data = d1_csf_k_fold, family = binomial())
model_glm_csf_ethnicity <- glm(AD_biomarker_status ~ raw_Ptau217_Lilly + geographic_region, data = d1_csf_k_fold, family = binomial())
model_glm_csf_covariates <- glm(AD_biomarker_status ~ raw_Ptau217_Lilly + + age + sex + bmi + egfr, data = d1_csf_k_fold, family = binomial())
model_glm_csf_full <- glm(AD_biomarker_status ~ raw_Ptau217_Lilly + geographic_region + age + sex + bmi + egfr, data = d1_csf_k_fold, family = binomial())

summary(model_glm_csf_ptau_only)
confint(model_glm_csf_ptau_only)
pR2(model_glm_csf_ptau_only)

summary(model_glm_csf_ethnicity)
confint(model_glm_csf_ethnicity)
pR2(model_glm_csf_ethnicity)

summary(model_glm_csf_covariates)
confint(model_glm_csf_covariates)
pR2(model_glm_csf_covariates)

summary(model_glm_csf_full)
confint(model_glm_csf_full)
pR2(model_glm_csf_full)

print(cbind(exp(model_glm_csf_ptau_only$coefficients), exp(confint(model_glm_csf_ptau_only))))
print(cbind(exp(model_glm_csf_ethnicity$coefficients), exp(confint(model_glm_csf_ethnicity))))
print(cbind(exp(model_glm_csf_covariates$coefficients), exp(confint(model_glm_csf_covariates))))
print(cbind(exp(model_glm_csf_full$coefficients), exp(confint(model_glm_csf_full))))


set.seed(123)
ctrl_biological <- trainControl(
                     method="cv", 
                     number = 5, 
                     summaryFunction=twoClassSummary, 
                     classProbs=TRUE,
                     savePredictions = TRUE)
model_csf_glm_k_fold_ptau_only <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = d1_csf_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological)
model_csf_glm_k_fold_ethnicity <- train(AD_biomarker_status ~ raw_Ptau217_Lilly + geographic_region,
               data = d1_csf_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological)
model_csf_glm_k_fold_covariates <- train(AD_biomarker_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr,
               data = d1_csf_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological)
model_csf_glm_k_fold_full <- train(AD_biomarker_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region,
               data = d1_csf_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological)

print(model_csf_glm_k_fold_ptau_only,showSD=T)
print(model_csf_glm_k_fold_ethnicity,showSD=T)
print(model_csf_glm_k_fold_covariates,showSD=T)
print(model_csf_glm_k_fold_full,showSD=T)


roc_object_csf_k_fold_ptau_only <- roc(
                 response = model_csf_glm_k_fold_ptau_only$pred$obs, 
                 predictor = model_csf_glm_k_fold_ptau_only$pred$BIO_AD_Positive,
                 levels = rev(levels(model_csf_glm_k_fold_ptau_only$pred$obs)))
roc_object_csf_k_fold_ethnicity <- roc(
                 response = model_csf_glm_k_fold_ethnicity$pred$obs, 
                 predictor = model_csf_glm_k_fold_ethnicity$pred$BIO_AD_Positive,
                 levels = rev(levels(model_csf_glm_k_fold_ethnicity$pred$obs)))
roc_object_csf_k_fold_covariates <- roc(
                 response = model_csf_glm_k_fold_covariates$pred$obs, 
                 predictor = model_csf_glm_k_fold_covariates$pred$BIO_AD_Positive,
                 levels = rev(levels(model_csf_glm_k_fold_covariates$pred$obs)))
roc_object_csf_k_fold_full <- roc(
                 response = model_csf_glm_k_fold_full$pred$obs, 
                 predictor = model_csf_glm_k_fold_full$pred$BIO_AD_Positive,
                 levels = rev(levels(model_csf_glm_k_fold_full$pred$obs)))

#The AUC for each fold
model_csf_glm_k_fold_ptau_only$resample$ROC
model_csf_glm_k_fold_ethnicity$resample$ROC
model_csf_glm_k_fold_covariates$resample$ROC
model_csf_glm_k_fold_full$resample$ROC
```

# Preparing the AUC curves
```{r}
#Funktioner
aucci<-function(x) {
  auc<-auc(x)
  ci<- ci.auc(x)
  plot(x, main = "ROC Curve", print.auc = TRUE)
  return(list(AUC = auc, CI = ci))
}

process_roc <- function(roc_obj) {
  data.frame(
    FPR = 1 - roc_obj$specificities,
    TPR = roc_obj$sensitivities
  ) %>%
    unique() %>%
    arrange(FPR, TPR)
}

###########################
options(scipen = 999)

roc_base_data <- process_roc(roc_object_k_fold_ptau_only)
roc_ethni_data <- process_roc(roc_object_k_fold_ethnicity)
roc_covar_data <- process_roc(roc_object_k_fold_covariates)
roc_full_data <- process_roc(roc_object_k_fold_full)

auc_cli_base<-auc(roc_object_k_fold_ptau_only)
auc_cli_ethni<-auc(roc_object_k_fold_ethnicity)
auc_cli_covar<-auc(roc_object_k_fold_covariates)
auc_cli_full<-auc(roc_object_k_fold_full)


roc_clinical_data<-rbind(
  data.frame(FPR = 100*roc_base_data$FPR, TPR = 100*roc_base_data$TPR, Model = "Base model"),
  data.frame(FPR = 100*roc_ethni_data$FPR, TPR = 100*roc_ethni_data$TPR, Model = "Ethnicity model"),
  data.frame(FPR = 100*roc_covar_data$FPR, TPR = 100*roc_covar_data$TPR, Model = "Covariate model"),
  data.frame(FPR = 100*roc_full_data$FPR, TPR = 100*roc_full_data$TPR, Model = "Full model")
)

roc_clinical_data$Model <- factor(roc_clinical_data$Model, levels = c("Base model",
                                                      "Ethnicity model",
                                                      "Covariate model",
                                                      "Full model"))

AUC_clinical_plot<-ggplot(roc_clinical_data, aes(x = FPR, y = TPR, color = Model)) +
  geom_step(linewidth = 1.2) +
  geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "black", size = 0.8) +
  scale_color_manual(values = c("Base model" = "#999999",
                                "Ethnicity model" = "#E69F00",
                                "Covariate model" = "#56B4E9", 
                                "Full model" = "#009E73"),
                     labels = c("Base model: p-tau217",
                                "Ethnicity model: p-tau217 + geographic origin",
                                "Covariate model: p-tau217 + age + sex + eGFR + BMI",
                                "Full model: p-tau217 + age + sex + eGFR + BMI + geographic origin")) +
  theme_classic() +
  theme(
    plot.title = element_text(family = "serif", size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(family = "serif", size = 14),
    axis.title.y = element_text(family = "serif", size = 14)) +
  labs(title = "", x = "100-Specificity", y = "Sensitivity") +
    theme(legend.position = "none") +
  guides(color = guide_legend(nrow=2)) +
    annotate("segment", x = 40, xend = 43, y = 35, yend = 35, color = "#999999", size = 2) +
  annotate("text", x = 45, y = 35, label = sprintf("Base model: AUC: %.3f (SD: 0.037)", auc_cli_base), color = "black", hjust = 0, family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 25, yend = 25, color = "#E69F00", size = 2) +
  annotate("text", x = 45, y = 25, label = sprintf("Ethnicity model: AUC: %.3f (SD: 0.035)",auc_cli_ethni), color = "black", hjust = 0, 
           family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 15, yend = 15, color = "#56B4E9", size = 2) +
  annotate("text", x = 45, y = 15, label = sprintf("Covariate model: AUC: %.3f (SD: 0.031)",auc_cli_covar), color = "black", hjust = 0, 
           family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 5, yend = 5, color = "#009E73", size = 2) +
  annotate("text", x = 45, y = 5, label = sprintf("Full model: AUC: %.3f (SD: 0.041)",auc_cli_full), color = "black", 
           hjust = 0, family = "serif", size = 7)



#CSF group
roc_csf_base_data <- process_roc(roc_object_csf_k_fold_ptau_only)
roc_csf_ethni_data <- process_roc(roc_object_csf_k_fold_ethnicity)
roc_csf_covar_data <- process_roc(roc_object_csf_k_fold_covariates)
roc_csf_full_data <- process_roc(roc_object_csf_k_fold_full)

auc_csf_base<-auc(roc_object_csf_k_fold_ptau_only)
auc_csf_ethni<-auc(roc_object_csf_k_fold_ethnicity)
auc_csf_covar<-auc(roc_object_csf_k_fold_covariates)
auc_csf_full<-auc(roc_object_csf_k_fold_full)


roc_csf_data<-rbind(
  data.frame(FPR = 100*roc_csf_base_data$FPR, TPR = 100*roc_csf_base_data$TPR, Model = "Base model"),
  data.frame(FPR = 100*roc_csf_ethni_data$FPR, TPR = 100*roc_csf_ethni_data$TPR, Model = "Ethnicity model"),
  data.frame(FPR = 100*roc_csf_covar_data$FPR, TPR = 100*roc_csf_covar_data$TPR, Model = "Covariate model"),
  data.frame(FPR = 100*roc_csf_full_data$FPR, TPR = 100*roc_csf_full_data$TPR, Model = "Full model")
)

roc_csf_data$Model <- factor(roc_csf_data$Model, levels = c("Base model",
                                                      "Ethnicity model",
                                                      "Covariate model",
                                                      "Full model"))

AUC_csf_plot<-ggplot(roc_csf_data, aes(x = FPR, y = TPR, color = Model)) +
  geom_step(linewidth = 1.2) +
  geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "black", size = 0.8) +
  scale_color_manual(values = c("Base model" = "#999999",
                                "Ethnicity model" = "#E69F00",
                                "Covariate model" = "#56B4E9", 
                                "Full model" = "#009E73"),
                     labels = c("Base model: p-tau217",
                                "Ethnicity model: p-tau217 + geographic origin",
                                "Covariate model: p-tau217 + age + sex + eGFR + BMI",
                                "Full model: p-tau217 + age + sex + eGFR + BMI + geographic origin")) +
  theme_classic() +
  theme(
    plot.title = element_text(family = "serif", size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(family = "serif", size = 14),
    axis.title.y = element_text(family = "serif", size = 14)) +
  labs(title = "", x = "100-Specificity", y = "Sensitivity") +
  theme(legend.position = "none") +
  guides(color = guide_legend(nrow=2)) +
    annotate("segment", x = 40, xend = 43, y = 35, yend = 35, color = "#999999", size = 2) +
  annotate("text", x = 45, y = 35, label = sprintf("Base model: AUC: %.3f (SD: 0.022)", auc_csf_base), color = "black", hjust = 0, family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 25, yend = 25, color = "#E69F00", size = 2) +
  annotate("text", x = 45, y = 25, label = sprintf("Ethnicity model: AUC: %.3f (SD: 0.018)",auc_csf_ethni), color = "black", hjust = 0, 
           family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 15, yend = 15, color = "#56B4E9", size = 2) +
  annotate("text", x = 45, y = 15, label = sprintf("Covariate model: AUC: %.3f (SD: 0.042)",auc_csf_covar), color = "black", hjust = 0, 
           family = "serif", size = 7) +
    annotate("segment", x = 40, xend = 43, y = 5, yend = 5, color = "#009E73", size = 2) +
  annotate("text", x = 45, y = 5, label = sprintf("Full model: AUC: %.3f (SD: 0.052)",auc_csf_full), color = "black", 
           hjust = 0, family = "serif", size = 7)
```

# **Figure 2**
```{r}
#r,fig.width=10,fig.height=10


# Add "A" and "B" to the plots
AUC_A <- AUC_clinical_plot + 
  annotation_custom(grob = textGrob("A", x = 0, y = 1, hjust = -0.5, vjust = 1, gp = gpar(fontsize = 20, fontface = "bold")))

AUC_B <- AUC_csf_plot + 
  annotation_custom(grob = textGrob("B", x = 0.05, y = 1, hjust = -0.5, vjust = 1, gp = gpar(fontsize = 20, fontface = "bold")))

# Combine the plots
hello <- grid.arrange(AUC_A, AUC_B, ncol = 2)

#Save
ggsave(filename = "Figure 2.tiff", 
       path = "L:/LovbeskyttetMapper/BlooDiv/ptau217 study/Writing/Study 1/submission alzheimers and dementia", 
       plot = hello,
       width = 20, 
       height = 10, 
       units = "in", 
       dpi = 300)
```

# Ptau217 stratified by ethnicity and AD status **Figure 3**
```{r}
d1_no_NA <- subset(d1, geographic_region != "NA")
d1_csf_no_NA <- subset(d1_csf, geographic_region != "NA")

# Identify patients examined with CSF/amyloid-PET for the plot
d1_no_NA <- d1_no_NA %>%
  mutate(Special_Group = ifelse(d1_no_NA$record_id %in% d1_csf_no_NA$record_id, "Special", "Regular"))

ggplot(d1_no_NA, aes(x = interaction(geographic_region, AD_clinical_status), 
                     y = Norm_High_ptau217_Lilly, 
                     color = AD_clinical_status)) +  # Shape varies by group
  geom_boxplot(outlier.shape = NA, alpha = 0.5) +
  scale_fill_manual(values = c("#E69F00", "#56B4E9")) +
  scale_color_manual(values = c("#E69F00", "#56B4E9")) +
  geom_jitter(aes(shape = Special_Group), position = position_jitter(width = 0.2), size = 1.8, alpha = 0.7) +  # Jitter colored by Special_Group
  ylim(0, 3.5) +
  geom_hline(yintercept = 0.308, linetype = "dashed", color = "black") +
  labs(x = "", y = "Plasma Ptau217 (pg/ml)", title = "") + 
  scale_x_discrete(labels = c("DK.CLI_AD_negative" = "DK", "DK.CLI_AD_positive" = "DK", 
                              "Africa.CLI_AD_negative" = "Africa", "Africa.CLI_AD_positive" = "Africa", 
                              "Europe.CLI_AD_negative" = "Europe", "Europe.CLI_AD_positive" = "Europe",
                              "Mid_east.CLI_AD_negative" = "Greater\nMiddle East", "Mid_east.CLI_AD_positive" = "Greater\nMiddle East")) +
  theme_minimal() +
  theme(legend.position = "none", 
        plot.title = element_text(family = "serif", size = 20, face = "bold", hjust = 0.5),
        axis.text.x = element_text(angle = 0, hjust = 0.5, family = "serif", color = "black"),
        plot.margin = margin(0, 0, 35, 0)) +
  #Allow to plot outside of limits  
  coord_cartesian(clip = "off") +
  # Add horizontal lines
  geom_segment(x = 0.5, xend = 4.4, y = -0.7, yend = -0.7, color = "black", size = 0.8) +  # Line for Non-AD
  geom_segment(x = 4.6, xend = 8.5, y = -0.7, yend = -0.7, color = "black", size = 0.8) +  # Line for AD
  # Adding "Non-AD" and "AD" labels below the lines
  geom_text(x = 2.5, y = -0.9, label = "Non-AD", size = 4, color = "black", family = "serif") +
  geom_text(x = 6.5, y = -0.9, label = "AD", size = 4, color = "black", family = "serif")


ggsave(filename = "Figure 3.tiff", 
       path = "L:/LovbeskyttetMapper/BlooDiv/ptau217 study/Writing/Study 1/submission alzheimers and dementia", 
       width = 8, 
       height = 6, 
       units = "in", 
       dpi = 300)
```


```{r}
#CLINICAL comparison
roc.test(roc_object_k_fold_ptau_only, roc_object_k_fold_ethnicity, method = "delong") 
roc.test(roc_object_k_fold_ptau_only, roc_object_k_fold_covariates, method = "delong")                                                            
roc.test(roc_object_k_fold_ptau_only, roc_object_k_fold_full, method = "delong") 
roc.test(roc_object_k_fold_ethnicity, roc_object_k_fold_covariates, method = "delong")                                                            
roc.test(roc_object_k_fold_ethnicity, roc_object_k_fold_full, method = "delong")                                                              
roc.test(roc_object_k_fold_covariates, roc_object_k_fold_full, method = "delong") 
#BIO comparison
roc.test(roc_object_csf_k_fold_ptau_only, roc_object_csf_k_fold_ethnicity, method = "delong") 
roc.test(roc_object_csf_k_fold_ptau_only, roc_object_csf_k_fold_covariates, method = "delong")                                                            
roc.test(roc_object_csf_k_fold_ptau_only, roc_object_csf_k_fold_full, method = "delong") 
roc.test(roc_object_csf_k_fold_ethnicity, roc_object_csf_k_fold_covariates, method = "delong")                                                            
roc.test(roc_object_csf_k_fold_ethnicity, roc_object_csf_k_fold_full, method = "delong")                                                              
roc.test(roc_object_csf_k_fold_covariates, roc_object_csf_k_fold_full, method = "delong") 

#youden
coords(roc_object_k_fold_ptau_only, "best", ret="all", transpose = FALSE, best.method="youden") 
coords(roc_object_k_fold_ethnicity, "best", ret="all", transpose = FALSE, best.method="youden") 
coords(roc_object_k_fold_covariates, "best", ret="all", transpose = FALSE, best.method="youden") 
coords(roc_object_k_fold_full, "best", ret="all", transpose = FALSE, best.method="youden") 

coords(roc_object_csf_k_fold_ptau_only, "best", ret="all", transpose = FALSE, best.method="youden") 
coords(roc_object_csf_k_fold_ethnicity, "best", ret="all", transpose = FALSE, best.method="youden")
coords(roc_object_csf_k_fold_covariates, "best", ret="all", transpose = FALSE, best.method="youden")
coords(roc_object_csf_k_fold_full, "best", ret="all", transpose = FALSE, best.method="youden") 
```


# [K-fold] CSF/Amyloid-PET subanalyses **Supplementary Table 6**
```{r}
amyloid_cohort <- subset(d1_csf, amyloid_pet == "normal" | amyloid_pet == "abnormal") 
elecsys_cohort <- subset(d1_csf, assay_change_group == "ElecsysVersion2")
  elecsys_cohort <- anti_join(elecsys_cohort, amyloid_cohort, by = "record_id")
innotest_cohort <- subset(d1_csf, assay_change_group == "InnotestELISA")
  innotest_cohort <- anti_join(innotest_cohort, amyloid_cohort, by = "record_id")
lumipulse_cohort <- subset(d1_csf, assay_change_group == "Lumipulse")
  lumipulse_cohort <- anti_join(lumipulse_cohort, amyloid_cohort, by = "record_id")
MSD_cohort <- subset(d1_csf, assay_change_group == "MSDAssay")
  MSD_cohort <- anti_join(MSD_cohort, amyloid_cohort, by = "record_id")



summary(tableby( ~ AD_biomarker_status + geographic_region, data=amyloid_cohort, control = median_settings))
summary(tableby( ~ AD_biomarker_status + geographic_region, data=elecsys_cohort, control = median_settings))
summary(tableby( ~ AD_biomarker_status + geographic_region, data=innotest_cohort, control = median_settings))
summary(tableby( ~ AD_biomarker_status + geographic_region, data=lumipulse_cohort, control = median_settings))
summary(tableby( ~ AD_biomarker_status + geographic_region, data=MSD_cohort, control = median_settings))


set.seed(123)
ctrl_biomarker <- trainControl(
                     method="cv", 
                     number = 5, 
                     summaryFunction=twoClassSummary, 
                     classProbs=TRUE,
                     savePredictions = TRUE)
model_k_fold_PET <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = amyloid_cohort, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biomarker)
model_k_fold_elecsys <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = elecsys_cohort, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biomarker)
model_k_fold_innotest <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = innotest_cohort, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biomarker)
model_k_fold_lumipulse <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = lumipulse_cohort, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biomarker)
model_k_fold_MSD <- train(AD_biomarker_status ~ raw_Ptau217_Lilly,
               data = MSD_cohort, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biomarker)

print(model_k_fold_PET,showSD=T)
print(model_k_fold_elecsys,showSD=T)
print(model_k_fold_innotest,showSD=T)
print(model_k_fold_lumipulse,showSD=T)
print(model_k_fold_MSD,showSD=T)


roc_amyloid_PET <- roc(
                 response = model_k_fold_PET$pred$obs, 
                 predictor = model_k_fold_PET$pred$BIO_AD_Positive,
                 levels = rev(levels(model_k_fold_PET$pred$obs)))
roc_elecsys <- roc(
                 response = model_k_fold_elecsys$pred$obs, 
                 predictor = model_k_fold_elecsys$pred$BIO_AD_Positive,
                 levels = rev(levels(model_k_fold_elecsys)))
roc_innotest <- roc(
                 response = model_k_fold_innotest$pred$obs, 
                 predictor = model_k_fold_innotest$pred$BIO_AD_Positive,
                 levels = rev(levels(model_k_fold_innotest$pred$obs)))
roc_lumipulse <- roc(
                 response = model_k_fold_lumipulse$pred$obs, 
                 predictor = model_k_fold_lumipulse$pred$BIO_AD_Positive,
                 levels = rev(levels(model_k_fold_lumipulse$pred$obs)))
roc_msd <- roc(
                 response = model_k_fold_MSD$pred$obs, 
                 predictor = model_k_fold_MSD$pred$BIO_AD_Positive,
                 levels = rev(levels(model_k_fold_MSD$pred$obs)))

roc.test(roc_amyloid_PET, roc_elecsys, method = "delong") 
roc.test(roc_amyloid_PET, roc_innotest, method = "delong") 
roc.test(roc_amyloid_PET, roc_lumipulse, method = "delong") 
roc.test(roc_amyloid_PET, roc_msd, method = "delong") 

roc.test(roc_elecsys, roc_innotest, method = "delong") 
roc.test(roc_elecsys, roc_lumipulse, method = "delong") 
roc.test(roc_elecsys, roc_msd, method = "delong") 

roc.test(roc_innotest, roc_lumipulse, method = "delong") 
roc.test(roc_innotest, roc_msd, method = "delong") 

roc.test(roc_lumipulse, roc_msd, method = "delong") 



roc_amyloid_PET_data <- process_roc(roc_amyloid_PET)
roc_elecsys_data <- process_roc(roc_elecsys)
roc_innotest_data <- process_roc(roc_innotest)
roc_lumipulse_data <- process_roc(roc_lumipulse)
roc_msd_data <- process_roc(roc_msd)

auc_amyloid_PET<-auc(roc_amyloid_PET)
auc_elecsys<-auc(roc_elecsys)
auc_innotest<-auc(roc_innotest)
auc_lumipulse<-auc(roc_lumipulse)
auc_msd<-auc(roc_msd)


roc_assays_data<-rbind(
  data.frame(FPR = 100*roc_amyloid_PET_data$FPR, TPR = 100*roc_amyloid_PET_data$TPR, Model = "Amyloid-PET"),
  data.frame(FPR = 100*roc_elecsys_data$FPR, TPR = 100*roc_elecsys_data$TPR, Model = "Elecsys"),
  data.frame(FPR = 100*roc_innotest_data$FPR, TPR = 100*roc_innotest_data$TPR, Model = "Innotest"),
  data.frame(FPR = 100*roc_lumipulse_data$FPR, TPR = 100*roc_lumipulse_data$TPR, Model = "Lumipulse"),
  data.frame(FPR = 100*roc_msd_data$FPR, TPR = 100*roc_msd_data$TPR, Model = "MSD")
)

roc_assays_data$Model <- factor(roc_assays_data$Model, levels = c("Amyloid-PET",
                                                      "Elecsys",
                                                      "Innotest",
                                                      "Lumipulse",
                                                      "MSD"))

AUC_assay_plot<-ggplot(roc_assays_data, aes(x = FPR, y = TPR, color = Model)) +
  geom_step(linewidth = 1.2) +
  geom_abline(slope = 1, intercept = 0, linetype = "dotted", color = "black", size = 0.8) +
  scale_color_manual(values = c("Amyloid-PET" = "#999999",
                                "Elecsys" = "#E69F00",
                                "Innotest" = "#56B4E9", 
                                "Lumipulse" = "#009E73",
                                "MSD" = "#CC79A7")) +
  theme_classic() +
  theme(
    plot.title = element_text(family = "serif", size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(family = "serif", size = 14),
    axis.title.y = element_text(family = "serif", size = 14)) +
  labs(title = "AUROC: By individual assay [5-fold]", x = "100-Specificity", y = "Sensitivity") +
  theme(legend.position = "none") +
    annotate("segment", x = 45, xend = 48, y = 45, yend = 45, color = "#999999", size = 2) +
  annotate("text", x = 50, y = 45, label = sprintf("Amyloid-PET: AUC: %.3f (SD: 0.063)", auc_amyloid_PET), color = "black", hjust = 0, family = "serif", size = 5) +
    annotate("segment", x = 45, xend = 48, y = 35, yend = 35, color = "#E69F00", size = 2) +
  annotate("text", x = 50, y = 35, label = sprintf("Elecsys: AUC: %.3f (SD: 0.045)",auc_elecsys), color = "black", hjust = 0, family = "serif", size = 5) +
    annotate("segment", x = 45, xend = 48, y = 25, yend = 25, color = "#56B4E9", size = 2) +
  annotate("text", x = 50, y = 25, label = sprintf("Innotest model: AUC: %.3f (SD: 0.051)",auc_innotest), color = "black", hjust = 0, family = "serif", size = 5) +
    annotate("segment", x = 45, xend = 48, y = 15, yend = 15, color = "#009E73", size = 2) +
  annotate("text", x = 50, y = 15, label = sprintf("Lumipulse: AUC: %.3f (SD: 0.036)",auc_lumipulse), color = "black", hjust = 0, family = "serif", size = 5) + 
    annotate("segment", x = 45, xend = 48, y = 5, yend = 5, color = "#CC79A7", size = 2) +
  annotate("text", x = 50, y = 5, label = sprintf("MSD: AUC: %.3f (SD: 0.206)", auc_msd), color = "black", hjust = 0, family = "serif", size = 5)
```
```{r,fig.width=10,fig.height=10}
AUC_assay_plot
```


# Diagnostic techniques used per group  **Supplementary Table 7**
```{r}
summary(tableby(minority_majority ~ AD_biomarker_status, data=d1_csf, control = median_settings))
summary(tableby(geographic_region ~ AD_biomarker_status, data=d1_csf, control = median_settings))

summary(tableby(minority_majority ~ mta + gca + fazeka, data=d1, control = median_settings))
summary(tableby(geographic_region ~ mta + gca + fazeka, data=d1, control = median_settings))

summary(tableby(minority_majority ~ as.factor(interpreter), data=d1, control = median_settings))
summary(tableby(geographic_region ~ as.factor(interpreter), data=d1, control = median_settings))

```

# Characteristics by memory clinic  **Supplementary Table 8**
```{r}
summary(tableby(Center ~ age + sex + education, data=d1, control = mean_settings))
summary(tableby(Center ~ geographic_region, data=d1, control = median_settings))
summary(tableby(Center ~ dementia_type, data=d1, control = median_settings))
summary(tableby(Center ~ bmi + egfr + alat + hba1c + tsh + diseases_per_pt, data=d1, control = median_settings))

summary(tableby(Center ~ AD_biomarker_status, data=d1_csf, control = median_settings))
summary(tableby(Center ~ csf_ab42 + csf_ptau181 + csf_ttau, data=d1, control = median_settings))
summary(tableby(Center ~ mta + gca + fazeka, data=d1, control = median_settings))
```


# Ptau217 concentration stratified by ethnicity and AD-status **Supplementary Table 9**
```{r}
d1_no_NA <- subset(d1, geographic_region != "NA")
d1_csf_no_NA <- subset(d1_csf, geographic_region != "NA")

  
#Comparative statistics of concentrations
CLI_AB_NEG <- subset(d1, AD_clinical_status == "CLI_AD_negative")
CLI_AB_POS <- subset(d1, AD_clinical_status == "CLI_AD_positive")
BIO_AB_NEG <- subset(d1_csf, AD_biomarker_status == "BIO_AD_Negative")
BIO_AB_POS <- subset(d1_csf, AD_biomarker_status == "BIO_AD_Positive")
summary(tableby(geographic_region ~ Norm_High_ptau217_Lilly, data=CLI_AB_NEG, control = median_settings))
summary(tableby(geographic_region ~ Norm_High_ptau217_Lilly, data=CLI_AB_POS, control = median_settings))
summary(tableby(geographic_region ~ Norm_High_ptau217_Lilly, data=BIO_AB_NEG, control = median_settings))
summary(tableby(geographic_region ~ Norm_High_ptau217_Lilly, data=BIO_AB_POS, control = median_settings))


#Accuracy measures and comparisons using established cutoff
d1_no_NA$norm_high_ptau217_cutoff_conf <- as.factor(ifelse(d1_no_NA$norm_high_ptau217_cutoff == "217_normal", "Healthy", "Sick"))
d1_no_NA$AD_clinical_status__conf <- as.factor(ifelse(d1_no_NA$AD_clinical_status == "CLI_AD_negative", "Healthy", "Sick"))


d1_no_NA$norm_high_ptau217_cutoff_numeric <- ifelse(d1_no_NA$norm_high_ptau217_cutoff == "217_normal", 0, 1)
d1_no_NA$AD_clinical_status_numeric <- ifelse(d1_no_NA$AD_clinical_status == "CLI_AD_negative", 0, 1)

DK <- subset(d1_no_NA, geographic_region == "DK")
Africa <- subset(d1_no_NA, geographic_region == "Africa")
Europe <- subset(d1_no_NA, geographic_region == "Europe")
Mid_east <- subset(d1_no_NA, geographic_region == "Mid_east")

table(DK$AD_clinical_status, DK$norm_high_ptau217_cutoff)
table(Africa$AD_clinical_status, Africa$norm_high_ptau217_cutoff)
table(Europe$AD_clinical_status, Europe$norm_high_ptau217_cutoff)
table(Mid_east$AD_clinical_status, Mid_east$norm_high_ptau217_cutoff)

# Bootstrap results to produce 95% CI
library(cutpointr)
set.seed(123)
opt_cut_DK <- cutpointr(
    data = DK,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_clinical_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

opt_cut_Africa <- cutpointr(
    data = Africa,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_clinical_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

opt_cut_Europe <- cutpointr(
    data = Europe,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_clinical_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

opt_cut_mid_east <- cutpointr(
    data = Mid_east,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_clinical_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

# Function extracting 95% CI for sensitivity
confindence_extract <- function(opt_object) {
  boot_acc <- opt_object$boot[[1]]$acc_b
  acc_lower_bound <- round(quantile(boot_acc, 0.025), 3)
  acc_upper_bound <- round(quantile(boot_acc, 0.975), 3)
  
  boot_sens <- opt_object$boot[[1]]$sensitivity_b
  sens_lower_bound <- round(quantile(boot_sens, 0.025), 3)
  sens_upper_bound <- round(quantile(boot_sens, 0.975), 3)
  
  boot_spec <- opt_object$boot[[1]]$specificity_b
  spec_lower_bound <- round(quantile(boot_spec, 0.025), 3)
  spec_upper_bound <- round(quantile(boot_spec, 0.975), 3)
  
  accuracy <- round(opt_object$acc, 3)
  sens <- round(opt_object$sensitivity, 3)
  spec <- round(opt_object$specificity, 3)

  print(paste("Accuracy: [", accuracy, "]"))
  print(paste("95% CI for Accuracy: [", acc_lower_bound, ", ", acc_upper_bound, "]"))
  print(paste("Sensitivity: [", sens, "]"))
  print(paste("95% CI for Sensitivity: [", sens_lower_bound, ", ", sens_upper_bound, "]"))
  print(paste("Specificity: [", spec, "]"))
  print(paste("95% CI for Specificity: [", spec_lower_bound, ", ", spec_upper_bound, "]"))

}

#Call results
confindence_extract(opt_cut_DK)
confindence_extract(opt_cut_Africa)
confindence_extract(opt_cut_Europe)
confindence_extract(opt_cut_mid_east)



#########################################
#CSF
d1_csf_no_NA$norm_high_ptau217_cutoff_numeric <- ifelse(d1_csf_no_NA$norm_high_ptau217_cutoff == "217_normal", 0, 1)
d1_csf_no_NA$AD_biomarker_status_numeric <- ifelse(d1_csf_no_NA$AD_biomarker_status == "BIO_AD_Negative", 0, 1)

DK_CSF <- subset(d1_csf_no_NA, geographic_region == "DK")
Africa_CSF <- subset(d1_csf_no_NA, geographic_region == "Africa")
Europe_CSF <- subset(d1_csf_no_NA, geographic_region == "Europe")
Mid_east_CSF <- subset(d1_csf_no_NA, geographic_region == "Mid_east")

table(DK_CSF$AD_biomarker_status, DK_CSF$norm_high_ptau217_cutoff)
table(Mid_east_CSF$AD_biomarker_status, Mid_east_CSF$norm_high_ptau217_cutoff)
table(Europe_CSF$AD_biomarker_status, Europe_CSF$norm_high_ptau217_cutoff)
table(Africa_CSF$AD_biomarker_status, Africa_CSF$norm_high_ptau217_cutoff)


# Bootstrap results to produce 95% CI
library(cutpointr)
set.seed(123)
opt_cut_DK_csf <- cutpointr(
    data = DK_CSF,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_biomarker_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

opt_cut_Africa_csf <- cutpointr(
    data = Africa_CSF,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_biomarker_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)

opt_cut_Europe_csf <- cutpointr(
    data = Europe_CSF,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_biomarker_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 5000,
    boot_stratify = TRUE)

opt_cut_mid_east_csf <- cutpointr(
    data = Mid_east_CSF,
    x = norm_high_ptau217_cutoff_numeric,
    class = AD_biomarker_status_numeric,
    pos_class = 1,
    direction = ">=",
    boot_runs = 1000,
    boot_stratify = TRUE)
summary(opt_cut_Europe_csf)

#Call results
confindence_extract(opt_cut_DK_csf)
confindence_extract(opt_cut_Africa_csf)
confindence_extract(opt_cut_Europe_csf)
confindence_extract(opt_cut_mid_east_csf)
```

#Plotting from preestablished cutoffs **Supplementary figure 1**
```{r}

#Plotting
# Data Preparation
plotting_precision <- data.frame(
  Geographic_Group = as.factor(rep(c("DK", "Africa", "Europe", "Mid East"), each = 3)),
  Metric = rep(c("Accuracy", "Sensitivity", "Specificity"), times = 4),
  Estimate = c(0.756, 0.909, 0.656,
               0.729, 0.786, 0.711,
               0.754, 0.918, 0.653,
               0.72, 0.825, 0.699),
  Lower = c(0.721, 0.87, 0.606,
            0.61, 0.571, 0.578,
            0.702, 0.849, 0.568,
            0.665, 0.7, 0.633),
  Upper = c(0.791, 0.943, 0.707,
            0.831, 1, 0.844,
            0.806, 0.973, 0.737,
            0.775, 0.925, 0.76)
)

# Create plot
plotting_precision <- plotting_precision %>%
  mutate(Metric_Factor = factor(Metric, levels = c("Accuracy", "Sensitivity", "Specificity")),
         Geographic_Group = factor(Geographic_Group, levels = c("DK", "Europe", "Mid East", "Africa")))


for1 <- ggplot(plotting_precision, aes(x = Estimate, 
                               y = as.numeric(Metric_Factor) + as.numeric(as.factor(Geographic_Group)) * 0.2,  
                               color = Geographic_Group)) +
  geom_point(size = 3) + 
  geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.2) + 
  theme_minimal() +
  labs(x = "", y = "") +  
  scale_y_reverse(breaks = c(1.5, 2.5, 3.5),  
                     labels = c("Accuracy", "Sensitivity", "Specificity")) + 
  scale_color_manual(values = c("DK" = "#999999", "Africa" = "#E69F00", "Europe" = "#56B4E9", "Mid East" = "#009E73")) +  
  theme(axis.text.y = element_text(size = 12),
        axis.title = element_text(size = 14),
        legend.title = element_blank(), 
        legend.text = element_text(size = 10),
        legend.position = c(0.9,0.2),  
        legend.background = element_rect(fill = "white", color = "black", linewidth = 0.5))   


#############################################
#CSF dataframe
plotting_precision_csf <- data.frame(
  Geographic_Group = as.factor(rep(c("DK", "Africa", "Europe", "Mid East"), each = 3)),
  Metric = rep(c("Accuracy", "Sensitivity", "Specificity"), times = 4),
  Estimate = c(0.857, 0.954, 0.72,
               0.679, 0.8, 0.611,
               0.835, 1, 0.686,
               0.861, 0.968, 0.818),
  Lower = c(0.818, 0.914, 0.636,
            0.5, 0.5, 0.389,
            0.763, 1, 0.549,
            0.787, 0.903, 0.714),
  Upper = c(0.895, 0.98, 0.804,
            0.857, 1, 0.833,
            0.897, 1, 0.804,
            0.926, 1, 0.909))

# Create plot
plotting_precision_csf <- plotting_precision_csf %>%
  mutate(Metric_Factor = factor(Metric, levels = c("Accuracy", "Sensitivity", "Specificity")),
         Geographic_Group = factor(Geographic_Group, levels = c("DK", "Europe", "Mid East", "Africa")))


for2 <- ggplot(plotting_precision_csf, aes(x = Estimate, 
                               y = as.numeric(Metric_Factor) + as.numeric(as.factor(Geographic_Group)) * 0.2,  
                               color = Geographic_Group)) +
  geom_point(size = 3) + 
  geom_errorbarh(aes(xmin = Lower, xmax = Upper), height = 0.2) + 
  theme_minimal() +
  labs(x = "", y = "") +  
  scale_y_reverse(breaks = c(1.5, 2.5, 3.5),  
                     labels = c("Accuracy", "Sensitivity", "Specificity")) + 
  scale_color_manual(values = c("DK" = "#999999", "Africa" = "#E69F00", "Europe" = "#56B4E9", "Mid East" = "#009E73")) +  
  theme(axis.text.y = element_text(size = 12),
        axis.title = element_text(size = 14),
        legend.title = element_blank(), 
        legend.text = element_text(size = 10),
        legend.position = "none")  



# Add "A" and "B" to the plots
plot_A <- for1 + 
  annotation_custom(grob = textGrob("A", x = 0, y = 1, hjust = -0.5, vjust = 1, gp = gpar(fontsize = 20, fontface = "bold")))

plot_B <- for2 + 
  annotation_custom(grob = textGrob("B", x = 0.05, y = 1, hjust = -0.5, vjust = 1, gp = gpar(fontsize = 20, fontface = "bold")))

# Combine the plots
sup_figure1 <- grid.arrange(plot_A, plot_B, ncol = 2)

#save
ggsave(filename = "Supplementary Figure 1.tiff", 
       path = "L:/LovbeskyttetMapper/BlooDiv/ptau217 study/Writing/Study 1/submission alzheimers and dementia", 
       plot = sup_figure1,
       width = 20, 
       height = 10, 
       units = "in", 
       dpi = 300)
```



#Sensitivity analyses stratified by whether CSF/AB-PET was part of the clinical evaluation 
```{r}
#Create the 2 dataframes
d1_no_CSF <- d1 %>%
  anti_join(d1_csf, by = "record_id")

table(d1_no_CSF$AD_clinical_status)
table(d1_csf$AD_biomarker_status)

#LM
model_lm_nocsf <- lm(log(raw_Ptau217_Lilly) ~ geographic_region + hba1c + age + sex + bmi + egfr + AD_clinical_status, data = d1_no_CSF)
model_lm_csf <- lm(log(raw_Ptau217_Lilly) ~ AD_biomarker_status + geographic_region + hba1c + age + sex + bmi + egfr, data = d1_csf)

summary(model_lm_nocsf)
summary(model_lm_csf)

#GLM
model_glm_nocsf <- glm(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region, data = d1_no_CSF, family = binomial())
summary(model_glm_nocsf)
confint(model_glm_nocsf)
pR2(model_glm_nocsf)
print(cbind(exp(model_glm_nocsf$coefficients), exp(confint(model_glm_nocsf))))

model_glm_yescsf <- glm(AD_biomarker_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region, data = d1_csf, family = binomial())
summary(model_glm_yescsf)
confint(model_glm_yescsf)
pR2(model_glm_yescsf)
print(cbind(exp(model_glm_yescsf$coefficients), exp(confint(model_glm_yescsf))))


#Accuracy
set.seed(123)
ctrl_biological <- trainControl(
                     method="cv", 
                     number = 5, 
                     summaryFunction=twoClassSummary, 
                     classProbs=TRUE,
                     savePredictions = TRUE)
model_csf_glm_k_fold_nocsf <- train(AD_clinical_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region,
               data = d1_no_CSF, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological,
               na.action = na.omit)
model_csf_glm_k_fold_yescsf <- train(AD_biomarker_status ~ raw_Ptau217_Lilly + age + sex + bmi + egfr + geographic_region,
               data = d1_csf_k_fold, 
               method = "glm", 
               family = binomial(), 
               metric = "ROC",
               trControl = ctrl_biological,
               na.action = na.omit)

print(model_csf_glm_k_fold_nocsf,showSD=T)
print(model_csf_glm_k_fold_yescsf,showSD=T)


roc_object_nocsf <- roc(
                 response = model_csf_glm_k_fold_nocsf$pred$obs, 
                 predictor = model_csf_glm_k_fold_nocsf$pred$CLI_AD_positive,
                 levels = rev(levels(model_csf_glm_k_fold_nocsf$pred$obs)))
roc_object_yescsf <- roc(
                 response = model_csf_glm_k_fold_yescsf$pred$obs, 
                 predictor = model_csf_glm_k_fold_yescsf$pred$BIO_AD_Positive,
                 levels = rev(levels(model_csf_glm_k_fold_yescsf$pred$obs)))

roc.test(roc_object_nocsf, roc_object_yescsf, method = "delong")
```
